import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import numpy as np
from ete3 import Tree, faces, TreeStyle


node_id = 0
used_vertices = {}

def draw_mesh(mesh, colour):
    for e in mesh.sorted_edge_list:
        plt.plot([e.v1.x, e.v2.x], [e.v1.y, e.v2.y], colour, linestyle="dotted")


def draw_leaf(mesh, tree_leaf, file_name, cost):
    plt.clf()
    #plt.axis([mesh.min_x, mesh.max_x, mesh.min_y, mesh.max_y])
    plt.xlabel(int(cost), fontsize=110)
    plt.gcf().subplots_adjust(bottom=0.30)
    draw_mesh(mesh, 'k')
    draw_contour(tree_leaf.contour, 'k')
    plt.savefig(file_name)


def draw_slice(path, colour):
    last_index = len(path) - 1
    curr_index = 0
    for vertex in path:
        if curr_index == last_index:
            break
        next_index = curr_index + 1
        v1 = path[curr_index]
        v2 = path[next_index]
        plt.plot([v1.x, v2.x], [v1.y, v2.y], colour, linewidth=4.0)
        curr_index = curr_index + 1


def draw_contour(contour, colour):
    last_index = len(contour) - 1
    for vertex in contour.contour:
        curr_index = np.where(contour.contour == vertex)[0][0]
        if curr_index == last_index:
            next_index = 0
        else:
            next_index = curr_index + 1
        v1 = contour[curr_index]
        v2 = contour[next_index]
        plt.plot([v1.x, v2.x], [v1.y, v2.y], colour, linewidth=4.0)


def draw_contour_interior(contour, colour):
    global used_vertices
    used_vertices = {}

    for v in contour.contour:
        used_vertices[(v.x, v.y)] = False
    for v in contour.contour:
        visit_node(v, contour, colour)


def visit_node(v, contour, colour):
    global used_vertices

    used_vertices[(v.x, v.y)] = True
    if v in contour:
        possible_directions = contour.get_possible_inside_directions(v)
    else:
        possible_directions = v.get_existing_edge_directions()
    for direction in possible_directions:
        edge = v.get_shortest_edge_in_direction(direction)
        if edge.v1 == v:
            v2 = edge.v2
        else:
            v2 = edge.v1
        plt.plot([v.x, v2.x], [v.y, v2.y], colour, linewidth=2.0)
        if not (v2.x, v2.y) in used_vertices:
            visit_node(v2, contour, colour)


def create_tree_string(mesh, node):
    global node_id
    from algorithms.OptimalEliminationTries import OptimalTreeContourNode
    if type(node) is OptimalTreeContourNode:
        node_id += 1
        my_id = node_id
        draw_contour_with_interior_and_slice(mesh, node.children[0], 'tmp/%s.png' % node_id, node.cost)
        c1_str = create_tree_string(mesh, node.children[0].child1)
        c2_str = create_tree_string(mesh, node.children[0].child2)
        return '(' + c1_str + ',' + c2_str + ')' + str(my_id)
    else:
        node_id += 1
        draw_leaf(mesh, node, 'tmp/%s.png' % node_id, node.cost)
        return str(node_id)


def draw_contour_with_interior_and_slice(mesh, tree_node_child, file_name, cost):
    plt.clf()
    plt.xlabel(int(cost), fontsize=110)
    plt.gcf().subplots_adjust(bottom=0.30)
    draw_mesh(mesh, 'k')
    draw_contour(tree_node_child.contour, 'k')
    draw_contour_interior(tree_node_child.contour, 'k')
    draw_slice(tree_node_child.path, 'r')
    plt.savefig(file_name)

def clear_tmp():
    import os
    folder = 'tmp'
    for the_file in os.listdir(folder):
        file_path = os.path.join(folder, the_file)
        try:
            if os.path.isfile(file_path):
                os.unlink(file_path)
        except e:
            print(e)

def draw_tree(tree_string):
    
    t = Tree(tree_string, format=8)
    
    def mylayout(node):
        #if node.name != 'L':
        file = 'tmp/%s.png' % node.name
        new_face = faces.ImgFace(file)
        new_face.rotable = True
        new_face.rotation = -90
        #new_face.margin_top = 50
        new_face.margin_left = 15
        faces.add_face_to_node(new_face, node, column=0 , position='branch-top')
        
    ts = TreeStyle()
    ts.rotation = 90
    ts.layout_fn = mylayout
    t.show(tree_style = ts)
    plt.clf()
    


    
    
    

